//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import axios, { AxiosError, AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

export class ApiViolaTricolor {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    /**
     * Страница статистики
     * @param pageNumber (optional) Номер страницы
     * @param isOnlyMale (optional) Фильтрация по полу (null - Ж+М, true - М, false - Ж)
     * @return Success
     */
    statistic(pageNumber: number | undefined, isOnlyMale: boolean | undefined , cancelToken?: CancelToken | undefined): Promise<StatisticModel> {
        let url_ = this.baseUrl + "/api/v1/statistic?";
        if (pageNumber === null)
            throw new Error("The parameter 'pageNumber' cannot be null.");
        else if (pageNumber !== undefined)
            url_ += "pageNumber=" + encodeURIComponent("" + pageNumber) + "&";
        if (isOnlyMale === null)
            throw new Error("The parameter 'isOnlyMale' cannot be null.");
        else if (isOnlyMale !== undefined)
            url_ += "isOnlyMale=" + encodeURIComponent("" + isOnlyMale) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processStatistic(_response);
        });
    }

    protected processStatistic(response: AxiosResponse): Promise<StatisticModel> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = StatisticModel.fromJS(resultData200);
            return Promise.resolve<StatisticModel>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<StatisticModel>(null as any);
    }

    /**
     * Получение файла
     * @param file (optional) 
     * @return Success
     */
    upload(file: FileParameter | undefined , cancelToken?: CancelToken | undefined): Promise<UploadModel> {
        let url_ = this.baseUrl + "/api/v1/upload";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (file === null || file === undefined)
            throw new Error("The parameter 'file' cannot be null.");
        else
            content_.append("file", file.data, file.fileName ? file.fileName : "file");

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpload(_response);
        });
    }

    protected processUpload(response: AxiosResponse): Promise<UploadModel> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = UploadModel.fromJS(resultData200);
            return Promise.resolve<UploadModel>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<UploadModel>(null as any);
    }
}

export class PageInfo implements IPageInfo {
    pageNumber?: number;
    totalItems?: number;
    totalPages?: number;

    constructor(data?: IPageInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageNumber = _data["pageNumber"];
            this.totalItems = _data["totalItems"];
            this.totalPages = _data["totalPages"];
        }
    }

    static fromJS(data: any): PageInfo {
        data = typeof data === 'object' ? data : {};
        let result = new PageInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageNumber"] = this.pageNumber;
        data["totalItems"] = this.totalItems;
        data["totalPages"] = this.totalPages;
        return data;
    }
}

export interface IPageInfo {
    pageNumber?: number;
    totalItems?: number;
    totalPages?: number;
}

export class PersonModel implements IPersonModel {
    id?: number;
    name?: string | undefined;
    city?: string | undefined;
    isMale?: boolean;
    age?: number;

    constructor(data?: IPersonModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.city = _data["city"];
            this.isMale = _data["isMale"];
            this.age = _data["age"];
        }
    }

    static fromJS(data: any): PersonModel {
        data = typeof data === 'object' ? data : {};
        let result = new PersonModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["city"] = this.city;
        data["isMale"] = this.isMale;
        data["age"] = this.age;
        return data;
    }
}

export interface IPersonModel {
    id?: number;
    name?: string | undefined;
    city?: string | undefined;
    isMale?: boolean;
    age?: number;
}

export class StatisticModel implements IStatisticModel {
    people?: PersonModel[] | undefined;
    pageInfo?: PageInfo;
    menCount?: number;
    womenCount?: number;
    isOnlyMale?: boolean | undefined;
    error?: string | undefined;

    constructor(data?: IStatisticModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["people"])) {
                this.people = [] as any;
                for (let item of _data["people"])
                    this.people!.push(PersonModel.fromJS(item));
            }
            this.pageInfo = _data["pageInfo"] ? PageInfo.fromJS(_data["pageInfo"]) : <any>undefined;
            this.menCount = _data["menCount"];
            this.womenCount = _data["womenCount"];
            this.isOnlyMale = _data["isOnlyMale"];
            this.error = _data["error"];
        }
    }

    static fromJS(data: any): StatisticModel {
        data = typeof data === 'object' ? data : {};
        let result = new StatisticModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.people)) {
            data["people"] = [];
            for (let item of this.people)
                data["people"].push(item.toJSON());
        }
        data["pageInfo"] = this.pageInfo ? this.pageInfo.toJSON() : <any>undefined;
        data["menCount"] = this.menCount;
        data["womenCount"] = this.womenCount;
        data["isOnlyMale"] = this.isOnlyMale;
        data["error"] = this.error;
        return data;
    }
}

export interface IStatisticModel {
    people?: PersonModel[] | undefined;
    pageInfo?: PageInfo;
    menCount?: number;
    womenCount?: number;
    isOnlyMale?: boolean | undefined;
    error?: string | undefined;
}

export class UploadModel implements IUploadModel {
    totalProcessedRows?: number;
    succesedProcessedRows?: number;
    fileName?: string | undefined;
    error?: string | undefined;

    constructor(data?: IUploadModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalProcessedRows = _data["totalProcessedRows"];
            this.succesedProcessedRows = _data["succesedProcessedRows"];
            this.fileName = _data["fileName"];
            this.error = _data["error"];
        }
    }

    static fromJS(data: any): UploadModel {
        data = typeof data === 'object' ? data : {};
        let result = new UploadModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalProcessedRows"] = this.totalProcessedRows;
        data["succesedProcessedRows"] = this.succesedProcessedRows;
        data["fileName"] = this.fileName;
        data["error"] = this.error;
        return data;
    }
}

export interface IUploadModel {
    totalProcessedRows?: number;
    succesedProcessedRows?: number;
    fileName?: string | undefined;
    error?: string | undefined;
}

export interface FileParameter {
    data: any;
    fileName: string;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any | undefined): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}